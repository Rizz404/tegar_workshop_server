generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "postgresqlExtensions", "relationJoins", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid()) @db.VarChar(30)
  username     String   @unique @db.VarChar(100)
  email        String   @unique @db.VarChar(100)
  password     String   @db.Text
  role         Role     @default(USER)
  profileImage String   @default("") @map("profile_image") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  userProfile     UserProfile?
  userMotorcycles UserMotorcycle[]
  orders          Order[]
  transactions    Transaction[]
  eTickets        ETicket[]
  cancellations   Cancellation[]
  refunds         Refund[]

  @@map("users")
}

model UserProfile {
  id          String   @id @default(cuid()) @db.VarChar(30)
  userId      String   @unique @map("user_id") @db.VarChar(30)
  fullname    String?  @db.VarChar(255)
  phoneNumber String?  @map("phone_number") @db.VarChar(20)
  address     String?  @db.Text
  latitude    Decimal? @db.Decimal(12, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  fcmToken    String?  @map("fcm_token") @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model MotorcycleBrand {
  id        String   @id @default(cuid()) @db.VarChar(30)
  name      String   @unique @db.VarChar(50)
  logo      String   @db.Text
  country   String?  @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  motorcycleModels MotorcycleModel[]

  @@map("motorcycle_brands")
}

model MotorcycleModel {
  id                String   @id @default(cuid()) @db.VarChar(30)
  motorcycleBrandId String   @map("motorcycle_brand_id") @db.VarChar(30)
  name              String   @db.VarChar(50)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  motorcycleBrand      MotorcycleBrand       @relation(fields: [motorcycleBrandId], references: [id], onDelete: Cascade)
  motorcycleModelYears MotorcycleModelYear[]

  @@unique([name, motorcycleBrandId])
  @@map("motorcycle_models")
}

model MotorcycleModelYear {
  id                String   @id @default(cuid()) @db.VarChar(30)
  motorcycleModelId String   @map("motorcycle_model_id") @db.VarChar(30)
  year              Int      @db.Integer
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  motorcycleModel MotorcycleModel  @relation(fields: [motorcycleModelId], references: [id], onDelete: Cascade)
  userMotorcycles UserMotorcycle[]

  @@unique([year, motorcycleModelId])
  @@map("motorcycle_model_years")
}

model UserMotorcycle {
  id                    String   @id @default(cuid()) @db.VarChar(30)
  userId                String   @map("user_id") @db.VarChar(30)
  motorcycleModelYearId String   @map("motorcycle_model_year_id") @db.VarChar(30)
  licensePlate          String   @map("license_plate") @db.VarChar(50)
  motorcycleImages      String[] @map("motorcycle_images")
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  motorcycleModelYear MotorcycleModelYear @relation(fields: [motorcycleModelYearId], references: [id], onDelete: Cascade)
  orders              Order[]

  @@map("user_motorcycles")
}

model Workshop {
  id          String   @id @default(cuid()) @db.VarChar(30)
  name        String   @unique @db.VarChar(100)
  email       String   @db.VarChar(100)
  phoneNumber String?  @map("phone_number") @db.VarChar(15)
  address     String   @db.Text
  latitude    Decimal  @db.Decimal(9, 6)
  longitude   Decimal  @db.Decimal(9, 6)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  orders Order[]

  @@map("workshops")
}

model MotorcycleService {
  id        String   @id @default(cuid()) @db.VarChar(30)
  name      String   @unique @db.VarChar(50)
  price     Decimal  @map("price") @db.Decimal(12, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  orders Order[]

  @@map("motorcycle_services")
}

model PaymentMethod {
  id             String             @id @default(cuid()) @db.VarChar(30)
  name           String             @unique @db.VarChar(100)
  type           PaymentMethodType  @default(EWALLET) @map("type")
  reusability    PaymentReusability @default(ONE_TIME_USE) @map("reusability")
  fee            Decimal            @db.Decimal(12, 2)
  minimumPayment Decimal            @default(0) @map("minimum_payment") @db.Decimal(12, 2)
  maximumPayment Decimal            @default(100000000) @map("maximum_payment") @db.Decimal(12, 2)
  description    String?            @db.Text
  logoUrl        String?            @map("logo_url") @db.Text
  isActive       Boolean            @default(true) @map("is_active")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  transactions         Transaction[]
  eWalletPaymentConfig EWalletPaymentConfig?
  virtualAccountConfig VirtualAccountConfig?

  @@map("payment_methods")
}

model EWalletPaymentConfig {
  id               String   @id @default(cuid()) @db.VarChar(30)
  paymentMethodId  String   @unique @map("payment_method_id") @db.VarChar(30)
  channelCode      String   @map("channel_code") @db.VarChar(50)
  successReturnUrl String?  @map("success_return_url") @db.Text
  failureReturnUrl String?  @map("failure_return_url") @db.Text
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@map("ewallet_payment_configs")
}

model VirtualAccountConfig {
  id              String   @id @default(cuid()) @db.VarChar(30)
  paymentMethodId String   @unique @map("payment_method_id") @db.VarChar(30)
  bankCode        String   @map("bank_code") @db.VarChar(50)
  bankName        String   @map("bank_name") @db.VarChar(100)
  accountPattern  String?  @map("account_pattern") @db.VarChar(50)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@map("virtual_account_configs")
}

model Order {
  id               String      @id @default(cuid()) @db.VarChar(30)
  userId           String      @map("user_id") @db.VarChar(30)
  userMotorcycleId String      @map("user_motorcycle_id") @db.VarChar(30)
  workshopId       String      @map("workshop_id") @db.VarChar(30)
  transactionId    String      @map("transaction_id") @db.VarChar(30)
  workStatus       WorkStatus  @default(QUEUED) @map("work_status")
  orderStatus      OrderStatus @default(DRAFT) @map("order_status")
  note             String?     @db.Text
  subtotalPrice    Decimal     @map("subtotal_price") @db.Decimal(12, 2)
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userMotorcycle     UserMotorcycle      @relation(fields: [userMotorcycleId], references: [id], onDelete: Cascade)
  workshop           Workshop            @relation(fields: [workshopId], references: [id], onDelete: Cascade)
  transaction        Transaction         @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  motorcycleServices MotorcycleService[]
  eTickets           ETicket[]

  @@map("orders")
}

model Transaction {
  id              String        @id @default(cuid()) @db.VarChar(30)
  userId          String        @map("user_id") @db.VarChar(30)
  paymentMethodId String        @map("payment_method_id") @db.VarChar(30)
  adminFee        Decimal       @map("admin_fee") @db.Decimal(12, 2)
  totalPrice      Decimal       @map("total_price") @db.Decimal(12, 2)
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod  @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  order         Order[]
  paymentdetail PaymentDetail?
  cancellation  Cancellation?
  refund        Refund?

  @@map("transactions")
}

model PaymentDetail {
  id                     String    @id @default(cuid()) @db.VarChar(30)
  transactionId          String    @unique @map("transaction_id") @db.VarChar(30)
  virtualAccountNumber   String?   @map("virtual_account_number") @db.Text
  invoiceUrl             String?   @map("invoice_url") @db.Text
  mobileUrl              String?   @map("mobile_url") @db.Text
  webUrl                 String?   @map("web_url") @db.Text
  deeplinkUrl            String?   @map("deeplink_url") @db.Text
  paidAt                 DateTime? @map("paid_at")
  xenditInvoiceId        String?   @map("xendit_invoice_id")
  xenditPaymentRequestId String?   @map("xendit_payment_request_id")
  xenditPaymentMethodId  String?   @map("xendit_payment_method_id")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("payment_details")
}

model Cancellation {
  id            String             @id @default(cuid()) @db.VarChar(30)
  transactionId String             @unique @map("transaction_id") @db.VarChar(30)
  reason        CancellationReason
  notes         String?            @db.Text
  cancelledById String             @map("cancelled_by_id") @db.VarChar(30)
  cancelledAt   DateTime           @default(now()) @map("cancelled_at")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  cancelledBy User        @relation(fields: [cancelledById], references: [id], onDelete: Restrict)

  @@map("cancellations")
}

model Refund {
  id            String   @id @default(cuid()) @db.VarChar(30)
  transactionId String   @unique @map("transaction_id") @db.VarChar(30)
  amount        Decimal  @db.Decimal(12, 2)
  reason        String   @db.Text
  refundedById  String   @map("refunded_by_id") @db.VarChar(30)
  refundedAt    DateTime @default(now()) @map("refunded_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  refundedBy  User        @relation(fields: [refundedById], references: [id], onDelete: Restrict)

  @@map("refunds")
}

model ETicket {
  id           String   @id @default(cuid()) @db.VarChar(30)
  userId       String   @map("user_id") @db.VarChar(30)
  orderId      String   @map("order_id") @db.VarChar(30)
  ticketNumber Int      @map("ticket_number")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("e_tickets")
}

enum WorkStatus {
  QUEUED
  INSPECTION
  IN_PROGRESS
  CANCELLED
}

enum OrderStatus {
  DRAFT
  CONFIRMED
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  EXPIRED
  FAILED
  REFUNDED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum PaymentMethodType {
  CARD
  DIRECT_DEBIT
  EWALLET
  OVER_THE_COUNTER
  QR_CODE
  VIRTUAL_ACCOUNT
  UNKNOWN_ENUM_VALUE
}

enum PaymentReusability {
  ONE_TIME_USE
  MULTIPLE_USE
}

enum CancellationReason {
  CUSTOMER_REQUEST
  WORKSHOP_UNAVAILABLE
  SERVICE_UNAVAILABLE
  SCHEDULING_CONFLICT
  PAYMENT_ISSUE
  VEHICLE_ISSUE
  PRICE_DISAGREEMENT
  WORKSHOP_OVERBOOKED
  DUPLICATE_ORDER
  PARTS_UNAVAILABLE
  CUSTOMER_NO_SHOW
  FORCE_MAJEURE
  SERVICE_INCOMPATIBILITY
  OTHER
}
